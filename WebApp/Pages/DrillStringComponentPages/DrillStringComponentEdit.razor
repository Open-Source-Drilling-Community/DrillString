@inject ISnackbar Snackbar
@implements IUnitAwareComponent
@inject ILogger<MudInputWithUnitAdornment> logger
<MudContainer>
    <MudPaper Class="my-2 py-2">
        @if (DrillStringComponentToEdit != null)
        {
            <MudGrid Class="mx-2 mb-2 align-end" Spacing="5">
                <MudItem xs="2">
                    <MudTextField @bind-Value="DrillStringComponentToEdit.Name" Label="Component name" Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="2">
                    <MudSelect @bind-Value="DrillStringComponentToEdit.Type" Label="Component type" Dense="true" Class="ml-4">
                        @foreach (DrillStringComponentTypes componentType in Enum.GetValues(typeof(DrillStringComponentTypes)))
                        {
                            <MudSelectItem Value="@componentType">@componentType</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="2">
                    @if (fieldIdToNameDict != null)
                    {
                        <MudSelect @bind-Value="@DrillStringComponentToEdit.FieldID" Label="Field name" Dense="true" Class="ml-4" ToStringFunc="@(s => (fieldIdToNameDict != null && s != null && fieldIdToNameDict.ContainsKey(s.Value)) ? fieldIdToNameDict[s.Value] : string.Empty)">
                            @foreach (var fieldKPV in fieldIdToNameDict)
                            {
                                <MudSelectItem Value="@((Guid?)fieldKPV.Key)">@fieldKPV.Value</MudSelectItem>
                            }
                        </MudSelect>
                    }
                </MudItem>
                <MudItem xs="5">
                    <MudToolBar>
                        <MudSpacer />
                        <MudButton StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Tertiary" OnClick="AddPart" Size="Size.Small"> Add part </MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Remove" IconColor="Color.Secondary" OnClick="RemovePart" Size="Size.Small"> Remove part</MudButton>
                        <MudSwitch @bind-Value="AdvancedComponentEditionTrue" Color="Color.Tertiary" UncheckedColor="Color.Secondary" Label="Advanced" />
                    </MudToolBar>
                </MudItem>
            </MudGrid>
        }
        @if (DrillStringComponentToEdit != null && DrillStringComponentParts != null)
        {
            @for (int i = 0; i < DrillStringComponentParts.Count; i += 1)
            {
                int index = i;
                <DrillStringPartEditor ComponentPartsList="DrillStringComponentParts"
                                       index="index" AdvancedComponentEditionTrue="AdvancedComponentEditionTrue" />
            }
        }
        <MudGrid Justify="Justify.FlexEnd">
            <MudItem xs="2">
                <MudButton StartIcon="@Icons.Material.Filled.SaveAs" IconColor="Color.Tertiary" OnClick="AddDrillStringComponent" Size="Size.Medium"> Create new </MudButton>
            </MudItem>
            <MudItem xs="2">
                <MudButton StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Tertiary" OnClick="UpdateDrillStringComponent" Size="Size.Medium"> Update </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public DrillStringComponent? DrillStringComponentToEdit { get; set; }
    [Parameter]
    public List<DrillStringComponentPart>? DrillStringComponentParts { get; set; }
    Guid? fieldID;
    //private List<DrillStringComponentPart> DrillStringComponentParts = new();
    private GetDigiWellClassClient getFieldIdClient = new GetDigiWellClassClient(TypeSelect.Field);
    private Dictionary<Guid, string> fieldIdToNameDict = new();
    private Guid? fID { get; set; }
    private Guid? ff = Guid.NewGuid();
    private string componentName = "";
    private DrillStringComponentTypes componentType;
    DrillStringComponentPart defaultElement =
        new DrillStringComponentPart
        {
            ID = Guid.NewGuid(),
            Name = "",
            InnerDiameter = 0.0,
            OuterDiameter = 0.0,
            TotalLength = 0.0,
            YoungModulus = 220E9,
            PoissonRatio = 0.28,
            MaterialDensity = 7800.0,
            AveragePartDensity = 7800.0,
            HeatCapacity = 510.0,
            ThermalCondutivity = 54.0,
            Mass = 0.0,
            FirstCrossSectionTorsionalInertia = 0.0,
            SecondCrossSectionTorsionalInertia = null
        };
    private bool AdvancedComponentEditionTrue { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            //Create a copy of the part list
            if (DrillStringComponentToEdit != null && DrillStringComponentParts != null)
            {
                componentName = DrillStringComponentToEdit.Name;
                componentType = DrillStringComponentToEdit.Type;
                //Clear old data
                DrillStringComponentParts.Clear();
                foreach (DrillStringComponentPart dsPart in DrillStringComponentToEdit.PartList)
                {
                    DrillStringComponentParts.Add(dsPart);
                }
                fieldID = (DrillStringComponentToEdit.FieldID != null && DrillStringComponentToEdit.FieldID != Guid.Empty) ? DrillStringComponentToEdit.FieldID : null;
                // Load fields from other microservices
                await getFieldIdClient.GetAllAsync(fieldIdToNameDict);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to load list of drill string component parts on initialization");
        }
        await InvokeAsync(() => { StateHasChanged(); });
    }
    private void AddPart()
    {
        if (DrillStringComponentParts != null)
            DrillStringComponentParts.Add(
                new DrillStringComponentPart
                {
                    ID = Guid.NewGuid(),
                    Name = "",
                    InnerDiameter = 0.0,
                    OuterDiameter = 0.0,
                    TotalLength = 0.0,
                    YoungModulus = 220E9,
                    PoissonRatio = 0.28,
                    MaterialDensity = 7800.0,
                    AveragePartDensity = 7800.0,
                    HeatCapacity = 510.0,
                    ThermalCondutivity = 54.0,
                    Mass = 0.0,
                    FirstCrossSectionTorsionalInertia = 0.0,
                    SecondCrossSectionTorsionalInertia = null
                }
            );
    }
    private void RemovePart()
    {
        if (DrillStringComponentParts != null)
        {
            if (DrillStringComponentParts.Count > 1)
            {
                DrillStringComponentParts.RemoveAt(DrillStringComponentParts.Count - 1);
            }
        }
    }
    private async Task UpdateDrillStringComponent()
    {
        try
        {
            //ScalarDrillingProperty myDerivedData1Param = new ScalarDrillingProperty() { DiracDistributionValue = new DiracDistribution() { Value = 1.0 } };
            List<DrillStringComponentPart>? drillStringComponentPartList = new();
            for (int i = 0; i < DrillStringComponentParts.Count; i += 1)
            {
                //Check if there is an input for the minimal geometrical data required
                if (DrillStringComponentParts[i].OuterDiameter * DrillStringComponentParts[i].TotalLength != 0.0)
                {
                    drillStringComponentPartList.Add(DrillStringComponentParts[i]);
                }
            }

            if (drillStringComponentPartList.Count > 0 && DrillStringComponentToEdit != null)
            {
                DateTimeOffset lastModificationDate = DateTimeOffset.UtcNow;
                DrillStringComponentToEdit.PartList = drillStringComponentPartList;
                DrillStringComponentToEdit.LastModificationDate = lastModificationDate;
                //DrillStringComponentToEdit.FieldID = fieldID;
                //Create instance of new element

                await APIUtils.ClientDrillString.PutDrillStringComponentByIdAsync(DrillStringComponentToEdit.MetaInfo.ID, DrillStringComponentToEdit);
                logger.LogInformation($"{DrillStringComponentToEdit.Name} component updated successfully");
                Snackbar.Add($"{DrillStringComponentToEdit.Name} component updated successfully", Severity.Success);
            }
            else
            {
                logger.LogError("Impossible to update the component");
                Snackbar.Add("Impossible to update the. Check for zero values in the OD, ID and Length elements.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to update the component");
            Snackbar.Add("Impossible to update the component", Severity.Warning);
        }
        StateHasChanged();
        //await OnInitializedAsync();
    }
    private async Task AddDrillStringComponent()
    {
        try
        {
            //ScalarDrillingProperty myDerivedData1Param = new ScalarDrillingProperty() { DiracDistributionValue = new DiracDistribution() { Value = 1.0 } };
            List<DrillStringComponentPart>? drillStringComponentPartList = new();
            for (int i = 0; i < DrillStringComponentParts.Count; i += 1)
            {
                //Check if there is an input for the minimal geometrical data required
                if (DrillStringComponentParts[i].OuterDiameter * DrillStringComponentParts[i].TotalLength != 0.0)
                {
                    drillStringComponentPartList.Add(DrillStringComponentParts[i]);
                }
            }

            if (drillStringComponentPartList.Count > 0 && DrillStringComponentToEdit != null)
            {
                MetaInfo metaInfo = new() { ID = Guid.NewGuid(), HttpHostName = APIUtils.HostNameDrillString, HttpHostBasePath = APIUtils.HostBasePathDrillString, HttpEndPoint = "DrillString/" };
                DateTimeOffset lastModificationDate = DateTimeOffset.UtcNow;
                DrillStringComponentToEdit.MetaInfo = metaInfo;
                DrillStringComponentToEdit.PartList = drillStringComponentPartList;
                DrillStringComponentToEdit.CreationDate = lastModificationDate;
                DrillStringComponentToEdit.LastModificationDate = lastModificationDate;
                //DrillStringComponentToEdit.FieldID = fieldID;
                //Create instance of new element
                await APIUtils.ClientDrillString.PostDrillStringComponentAsync(DrillStringComponentToEdit);
                logger.LogInformation($"{DrillStringComponentToEdit.Name} component created successfully");
                Snackbar.Add($"{DrillStringComponentToEdit.Name} component created successfully", Severity.Success);
            }
            else
            {
                logger.LogError("Impossible to update the component");
                Snackbar.Add("Impossible to update the. Check for zero values in the OD, ID and Length elements.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to update the component");
            Snackbar.Add("Impossible to update the component", Severity.Warning);
        }
        StateHasChanged();
        //await OnInitializedAsync();
    }
    public void ManageUnits()
    {
    }
}